{
  "service": {
    "service": "tagapp-backend",
    "serviceObject": {
      "name": "tagapp-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-west-2",
      "environment": {
        "S3_BUCKET": "tagapp-videos",
        "USERS_TABLE": "Users",
        "POSTS_TABLE": "Posts",
        "COMMUNITIES_TABLE": "Communities",
        "INBOX_TABLE": "Inbox",
        "JWT_SECRET": "dev-secret-change-me"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject"
              ],
              "Resource": "arn:aws:s3:::tagapp-videos/*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-west-2:*:table/Users",
                "arn:aws:dynamodb:us-west-2:*:table/Posts",
                "arn:aws:dynamodb:us-west-2:*:table/Communities",
                "arn:aws:dynamodb:us-west-2:*:table/Inbox"
              ]
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "PresignUploadLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-presignUpload"
            }
          },
          "CreatePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-createPost"
            }
          },
          "GetAllPostsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getAllPosts"
            }
          },
          "GetCommunityFeedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getCommunityFeed"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-updateUser"
            }
          },
          "GetInboxLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getInbox"
            }
          },
          "GetVideoUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getVideoUrl"
            }
          },
          "GetUserPostsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getUserPosts"
            }
          },
          "RegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-register"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-login"
            }
          },
          "LikePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-likePost"
            }
          },
          "UnlikePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-unlikePost"
            }
          },
          "SavePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-savePost"
            }
          },
          "UnsavePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-unsavePost"
            }
          },
          "AddCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-addComment"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "tagapp-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagapp-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagapp-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "tagapp-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "PresignUploadLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/presign.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-presignUpload",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PresignUploadLogGroup"
            ]
          },
          "CreatePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/posts.create",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-createPost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePostLogGroup"
            ]
          },
          "GetAllPostsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/posts.getAll",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getAllPosts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllPostsLogGroup"
            ]
          },
          "GetCommunityFeedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/posts.getCommunityFeed",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getCommunityFeed",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCommunityFeedLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/users.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/users.update",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-updateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "GetInboxLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/inbox.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getInbox",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetInboxLogGroup"
            ]
          },
          "GetVideoUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/get-video-url.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getVideoUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetVideoUrlLogGroup"
            ]
          },
          "GetUserPostsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/posts.getUserPosts",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getUserPosts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserPostsLogGroup"
            ]
          },
          "RegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/auth.register",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-register",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/auth.login",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "LikePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.likePost",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-likePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LikePostLogGroup"
            ]
          },
          "UnlikePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.unlikePost",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-unlikePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UnlikePostLogGroup"
            ]
          },
          "SavePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.savePost",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-savePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SavePostLogGroup"
            ]
          },
          "UnsavePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.unsavePost",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-unsavePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UnsavePostLogGroup"
            ]
          },
          "AddCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.addComment",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-addComment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddCommentLogGroup"
            ]
          },
          "PresignUploadLambdaVersion5nNMDHy6mn3CIKONJZM9uZUQs81RAq3vfPHarxTNP2M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PresignUploadLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "CreatePostLambdaVersion4RUbXnplyxT4km87J4LOfIZcRQaHN9JmrtPA3Tzcs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePostLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "GetAllPostsLambdaVersionl1E6tr7CDjx0zE3lPRFtmqdCgok9M0iBM7HViUIb4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllPostsLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "GetCommunityFeedLambdaVersionaXkwASHs30M1E4mmqq4VbXqlS4qljS0OIhGdhhrrfak": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCommunityFeedLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "GetUserLambdaVersionvaup7tGKviECA0BlDmHn0j4Et8MH4SYpYuVTy3WTfP4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "UpdateUserLambdaVersionPL5bXXLAx88amH9gjgvPtKgUUInPraMKYnFNZUZQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "GetInboxLambdaVersionUBqpAWzej222C0l5BiYyA0ZqnaGR4uidg7BpNFgc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetInboxLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "GetVideoUrlLambdaVersionpEFkn3kD2qCF0lYPpteJg4GmFIfni4cJVt6Tz1z9c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetVideoUrlLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "GetUserPostsLambdaVersionSPmHGcsGyNmPa5AIZU4Fl6bMJ18Y4oB5FJzhJzOU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserPostsLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "RegisterLambdaVersiong6jeIDMgGrFIDPaUDFK5nZRTBEOo7KckMjPbLHczMVM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "LoginLambdaVersionpOkAenuC5RaclSUADsxO4sFxROcN5OYPEVkMJ5koGU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "LikePostLambdaVersionzJiUENuZ6a6K5REsWfWURBa7QFNSpbSTFjAzVnvPgM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LikePostLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "UnlikePostLambdaVersionHWWq4rcyMnWgE8omIrk2WEnRvd3Y0pQoeNLLozh6b0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UnlikePostLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "SavePostLambdaVersionl6RUNQGhkwlgGMhiNX2uLHwTBDBUT2XyreXaLZo0tE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SavePostLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "UnsavePostLambdaVersionMVLqHO5t8TEaF1WJPAKFq94KbMZMxX7jOpVgTpQ9k4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UnsavePostLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "AddCommentLambdaVersionMiPSqsYqstdOlhzRc8DtF7vpgikkhhwVaa4X7AIiCn0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddCommentLambdaFunction"
              },
              "CodeSha256": "J/yFF5dG5fUvXzJG3GSifCSxmtTzxcLd74xwoNd9iRY="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-tagapp-backend",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "PresignUploadLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PresignUploadLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPresignUpload": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PresignUploadLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPresign": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /presign",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPresignUpload"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPresignUpload"
          },
          "CreatePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreatePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreatePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPosts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /posts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreatePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreatePost"
          },
          "GetAllPostsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllPostsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllPosts": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllPostsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetPosts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /posts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllPosts"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllPosts"
          },
          "GetCommunityFeedLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCommunityFeedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCommunityFeed": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCommunityFeedLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCommunitiesCommunityidVarPosts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /communities/{communityId}/posts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCommunityFeed"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCommunityFeed"
          },
          "GetUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsersUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users/{userId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUser"
          },
          "UpdateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users/{userId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateUser"
          },
          "GetInboxLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetInboxLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetInbox": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetInboxLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsersUseridVarInbox": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users/{userId}/inbox",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetInbox"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetInbox"
          },
          "GetVideoUrlLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetVideoUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetVideoUrl": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetVideoUrlLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetVideoDashurlObjectkeyVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /video-url/{objectKey+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetVideoUrl"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetVideoUrl"
          },
          "GetUserPostsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserPostsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUserPosts": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserPostsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsersUseridVarPosts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users/{userId}/posts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUserPosts"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUserPosts"
          },
          "RegisterLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRegister": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RegisterLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthRegister": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/register",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRegister"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRegister"
          },
          "LoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogin"
          },
          "LikePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LikePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLikePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LikePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPostsPostidVarLike": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /posts/{postId}/like",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLikePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLikePost"
          },
          "UnlikePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UnlikePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUnlikePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UnlikePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeletePostsPostidVarLike": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /posts/{postId}/like",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUnlikePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUnlikePost"
          },
          "SavePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SavePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSavePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SavePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPostsPostidVarSave": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /posts/{postId}/save",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSavePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSavePost"
          },
          "UnsavePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UnsavePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUnsavePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UnsavePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeletePostsPostidVarSave": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /posts/{postId}/save",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUnsavePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUnsavePost"
          },
          "AddCommentLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddComment": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddCommentLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPostsPostidVarComments": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /posts/{postId}/comments",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddComment"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAddComment"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "PresignUploadLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PresignUploadLambdaVersion5nNMDHy6mn3CIKONJZM9uZUQs81RAq3vfPHarxTNP2M"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-PresignUploadLambdaFunctionQualifiedArn"
            }
          },
          "CreatePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePostLambdaVersion4RUbXnplyxT4km87J4LOfIZcRQaHN9JmrtPA3Tzcs"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-CreatePostLambdaFunctionQualifiedArn"
            }
          },
          "GetAllPostsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllPostsLambdaVersionl1E6tr7CDjx0zE3lPRFtmqdCgok9M0iBM7HViUIb4"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetAllPostsLambdaFunctionQualifiedArn"
            }
          },
          "GetCommunityFeedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCommunityFeedLambdaVersionaXkwASHs30M1E4mmqq4VbXqlS4qljS0OIhGdhhrrfak"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetCommunityFeedLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionvaup7tGKviECA0BlDmHn0j4Et8MH4SYpYuVTy3WTfP4"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionPL5bXXLAx88amH9gjgvPtKgUUInPraMKYnFNZUZQ"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "GetInboxLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetInboxLambdaVersionUBqpAWzej222C0l5BiYyA0ZqnaGR4uidg7BpNFgc"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetInboxLambdaFunctionQualifiedArn"
            }
          },
          "GetVideoUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetVideoUrlLambdaVersionpEFkn3kD2qCF0lYPpteJg4GmFIfni4cJVt6Tz1z9c"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetVideoUrlLambdaFunctionQualifiedArn"
            }
          },
          "GetUserPostsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserPostsLambdaVersionSPmHGcsGyNmPa5AIZU4Fl6bMJ18Y4oB5FJzhJzOU"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetUserPostsLambdaFunctionQualifiedArn"
            }
          },
          "RegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterLambdaVersiong6jeIDMgGrFIDPaUDFK5nZRTBEOo7KckMjPbLHczMVM"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-RegisterLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionpOkAenuC5RaclSUADsxO4sFxROcN5OYPEVkMJ5koGU"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "LikePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LikePostLambdaVersionzJiUENuZ6a6K5REsWfWURBa7QFNSpbSTFjAzVnvPgM"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-LikePostLambdaFunctionQualifiedArn"
            }
          },
          "UnlikePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UnlikePostLambdaVersionHWWq4rcyMnWgE8omIrk2WEnRvd3Y0pQoeNLLozh6b0"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-UnlikePostLambdaFunctionQualifiedArn"
            }
          },
          "SavePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SavePostLambdaVersionl6RUNQGhkwlgGMhiNX2uLHwTBDBUT2XyreXaLZo0tE"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-SavePostLambdaFunctionQualifiedArn"
            }
          },
          "UnsavePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UnsavePostLambdaVersionMVLqHO5t8TEaF1WJPAKFq94KbMZMxX7jOpVgTpQ9k4"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-UnsavePostLambdaFunctionQualifiedArn"
            }
          },
          "AddCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddCommentLambdaVersionMiPSqsYqstdOlhzRc8DtF7vpgikkhhwVaa4X7AIiCn0"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-AddCommentLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [],
    "pluginsData": {},
    "functions": {
      "presignUpload": {
        "handler": "src/presign.handler",
        "events": [
          {
            "httpApi": {
              "path": "/presign",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/presign"
          }
        ],
        "name": "tagapp-backend-dev-presignUpload",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PresignUploadLambdaVersion5nNMDHy6mn3CIKONJZM9uZUQs81RAq3vfPHarxTNP2M"
      },
      "createPost": {
        "handler": "src/posts.create",
        "events": [
          {
            "httpApi": {
              "path": "/posts",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/posts"
          }
        ],
        "name": "tagapp-backend-dev-createPost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreatePostLambdaVersion4RUbXnplyxT4km87J4LOfIZcRQaHN9JmrtPA3Tzcs"
      },
      "getAllPosts": {
        "handler": "src/posts.getAll",
        "events": [
          {
            "httpApi": {
              "path": "/posts",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/posts"
          }
        ],
        "name": "tagapp-backend-dev-getAllPosts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAllPostsLambdaVersionl1E6tr7CDjx0zE3lPRFtmqdCgok9M0iBM7HViUIb4"
      },
      "getCommunityFeed": {
        "handler": "src/posts.getCommunityFeed",
        "events": [
          {
            "httpApi": {
              "path": "/communities/{communityId}/posts",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/communities/{communityId}/posts"
          }
        ],
        "name": "tagapp-backend-dev-getCommunityFeed",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetCommunityFeedLambdaVersionaXkwASHs30M1E4mmqq4VbXqlS4qljS0OIhGdhhrrfak"
      },
      "getUser": {
        "handler": "src/users.get",
        "events": [
          {
            "httpApi": {
              "path": "/users/{userId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users/{userId}"
          }
        ],
        "name": "tagapp-backend-dev-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionvaup7tGKviECA0BlDmHn0j4Et8MH4SYpYuVTy3WTfP4"
      },
      "updateUser": {
        "handler": "src/users.update",
        "events": [
          {
            "httpApi": {
              "path": "/users/{userId}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/users/{userId}"
          }
        ],
        "name": "tagapp-backend-dev-updateUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersionPL5bXXLAx88amH9gjgvPtKgUUInPraMKYnFNZUZQ"
      },
      "getInbox": {
        "handler": "src/inbox.get",
        "events": [
          {
            "httpApi": {
              "path": "/users/{userId}/inbox",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users/{userId}/inbox"
          }
        ],
        "name": "tagapp-backend-dev-getInbox",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetInboxLambdaVersionUBqpAWzej222C0l5BiYyA0ZqnaGR4uidg7BpNFgc"
      },
      "getVideoUrl": {
        "handler": "src/get-video-url.handler",
        "events": [
          {
            "httpApi": {
              "path": "/video-url/{objectKey+}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/video-url/{objectKey+}"
          }
        ],
        "name": "tagapp-backend-dev-getVideoUrl",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetVideoUrlLambdaVersionpEFkn3kD2qCF0lYPpteJg4GmFIfni4cJVt6Tz1z9c"
      },
      "getUserPosts": {
        "handler": "src/posts.getUserPosts",
        "events": [
          {
            "httpApi": {
              "path": "/users/{userId}/posts",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users/{userId}/posts"
          }
        ],
        "name": "tagapp-backend-dev-getUserPosts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserPostsLambdaVersionSPmHGcsGyNmPa5AIZU4Fl6bMJ18Y4oB5FJzhJzOU"
      },
      "register": {
        "handler": "src/auth.register",
        "events": [
          {
            "httpApi": {
              "path": "/auth/register",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/auth/register"
          }
        ],
        "name": "tagapp-backend-dev-register",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RegisterLambdaVersiong6jeIDMgGrFIDPaUDFK5nZRTBEOo7KckMjPbLHczMVM"
      },
      "login": {
        "handler": "src/auth.login",
        "events": [
          {
            "httpApi": {
              "path": "/auth/login",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/auth/login"
          }
        ],
        "name": "tagapp-backend-dev-login",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersionpOkAenuC5RaclSUADsxO4sFxROcN5OYPEVkMJ5koGU"
      },
      "likePost": {
        "handler": "src/interactions.likePost",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/like",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/posts/{postId}/like"
          }
        ],
        "name": "tagapp-backend-dev-likePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LikePostLambdaVersionzJiUENuZ6a6K5REsWfWURBa7QFNSpbSTFjAzVnvPgM"
      },
      "unlikePost": {
        "handler": "src/interactions.unlikePost",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/like",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/posts/{postId}/like"
          }
        ],
        "name": "tagapp-backend-dev-unlikePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UnlikePostLambdaVersionHWWq4rcyMnWgE8omIrk2WEnRvd3Y0pQoeNLLozh6b0"
      },
      "savePost": {
        "handler": "src/interactions.savePost",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/save",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/posts/{postId}/save"
          }
        ],
        "name": "tagapp-backend-dev-savePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SavePostLambdaVersionl6RUNQGhkwlgGMhiNX2uLHwTBDBUT2XyreXaLZo0tE"
      },
      "unsavePost": {
        "handler": "src/interactions.unsavePost",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/save",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/posts/{postId}/save"
          }
        ],
        "name": "tagapp-backend-dev-unsavePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UnsavePostLambdaVersionMVLqHO5t8TEaF1WJPAKFq94KbMZMxX7jOpVgTpQ9k4"
      },
      "addComment": {
        "handler": "src/interactions.addComment",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/comments",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/posts/{postId}/comments"
          }
        ],
        "name": "tagapp-backend-dev-addComment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AddCommentLambdaVersionMiPSqsYqstdOlhzRc8DtF7vpgikkhhwVaa4X7AIiCn0"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "tagapp-backend",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\arind\\Music\\TAG\\TagApp\\backend\\.serverless\\tagapp-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/tagapp-backend/dev/1760876483266-2025-10-19T12:21:23.266Z",
    "artifact": "tagapp-backend.zip"
  }
}