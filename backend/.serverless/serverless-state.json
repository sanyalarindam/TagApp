{
  "service": {
    "service": "tagapp-backend",
    "serviceObject": {
      "name": "tagapp-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-west-2",
      "environment": {
        "S3_BUCKET": "tagapp-videos",
        "USERS_TABLE": "Users",
        "POSTS_TABLE": "Posts",
        "COMMUNITIES_TABLE": "Communities",
        "INBOX_TABLE": "Inbox",
        "JWT_SECRET": "dev-secret-change-me",
        "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
        "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
        "BEDROCK_REGION": "us-west-2"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject"
              ],
              "Resource": "arn:aws:s3:::tagapp-videos/*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "bedrock:InvokeModel"
              ],
              "Resource": [
                "arn:aws:bedrock:*:*:model/*",
                "arn:aws:bedrock:*:*:inference-profile/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-west-2:*:table/Users",
                "arn:aws:dynamodb:us-west-2:*:table/Posts",
                "arn:aws:dynamodb:us-west-2:*:table/Communities",
                "arn:aws:dynamodb:us-west-2:*:table/Inbox"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "PresignUploadLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-presignUpload"
            }
          },
          "CreatePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-createPost"
            }
          },
          "GetAllPostsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getAllPosts"
            }
          },
          "GetCommunityFeedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getCommunityFeed"
            }
          },
          "ListCommunitiesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-listCommunities"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getUser"
            }
          },
          "GetUserRankLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getUserRank"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-updateUser"
            }
          },
          "GetInboxLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getInbox"
            }
          },
          "GetVideoUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getVideoUrl"
            }
          },
          "GetUserPostsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-getUserPosts"
            }
          },
          "RegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-register"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-login"
            }
          },
          "LikePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-likePost"
            }
          },
          "UnlikePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-unlikePost"
            }
          },
          "SavePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-savePost"
            }
          },
          "UnsavePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-unsavePost"
            }
          },
          "AddCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-addComment"
            }
          },
          "VerifyVideoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tagapp-backend-dev-verifyVideo"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "tagapp-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagapp-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagapp-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "tagapp-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "PresignUploadLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/presign.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-presignUpload",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PresignUploadLogGroup"
            ]
          },
          "CreatePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/posts.create",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-createPost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePostLogGroup"
            ]
          },
          "GetAllPostsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/posts.getAll",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getAllPosts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllPostsLogGroup"
            ]
          },
          "GetCommunityFeedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/posts.getCommunityFeed",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getCommunityFeed",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCommunityFeedLogGroup"
            ]
          },
          "ListCommunitiesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/communities.list",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-listCommunities",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListCommunitiesLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/users.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "GetUserRankLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/users.rank",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getUserRank",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserRankLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/users.update",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-updateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "GetInboxLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/inbox.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getInbox",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetInboxLogGroup"
            ]
          },
          "GetVideoUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/get-video-url.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getVideoUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetVideoUrlLogGroup"
            ]
          },
          "GetUserPostsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/posts.getUserPosts",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-getUserPosts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserPostsLogGroup"
            ]
          },
          "RegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/auth.register",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-register",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/auth.login",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "LikePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.likePost",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-likePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LikePostLogGroup"
            ]
          },
          "UnlikePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.unlikePost",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-unlikePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UnlikePostLogGroup"
            ]
          },
          "SavePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.savePost",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-savePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SavePostLogGroup"
            ]
          },
          "UnsavePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.unsavePost",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-unsavePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UnsavePostLogGroup"
            ]
          },
          "AddCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "src/interactions.addComment",
              "Runtime": "nodejs18.x",
              "FunctionName": "tagapp-backend-dev-addComment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddCommentLogGroup"
            ]
          },
          "VerifyVideoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z/tagapp-backend.zip"
              },
              "Handler": "verification_lambda/handler.lambda_handler",
              "Runtime": "python3.11",
              "FunctionName": "tagapp-backend-dev-verifyVideo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET": "tagapp-videos",
                  "USERS_TABLE": "Users",
                  "POSTS_TABLE": "Posts",
                  "COMMUNITIES_TABLE": "Communities",
                  "INBOX_TABLE": "Inbox",
                  "JWT_SECRET": "dev-secret-change-me",
                  "BEDROCK_INFERENCE_PROFILE_ARN": "arn:aws:bedrock:us-west-2:YOUR_AWS_ACCOUNT_ID:inference-profile/us.twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_FOUNDATION_MODEL_ID": "twelvelabs.pegasus-1-2-v1:0",
                  "BEDROCK_REGION": "us-west-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifyVideoLogGroup"
            ]
          },
          "PresignUploadLambdaVersionnAWJGk7nEVHzsKF6T1yzf5OtXq9cXXnHfgBEADhx5Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PresignUploadLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "CreatePostLambdaVersionxsQuu9FkLk2iFwypoEp8QTLeY9ryvEBbWL3t7qhk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePostLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "GetAllPostsLambdaVersion4cKE904vVdTm9MLcmN3Dq72RzWHp2FNzhyJVZk7BIk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllPostsLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "GetCommunityFeedLambdaVersiongz1FPfU3biTVxV8nAeRY39XCC5IhoSO8zJdAFpGngDg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCommunityFeedLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "ListCommunitiesLambdaVersion8bz6iKsOFZzp8sMUpSWPR2Xq3xFnqe6zrUaKIFItSY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListCommunitiesLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "GetUserLambdaVersionyAWxaytAupyRe7U51pjAjKzQiEaIqJVywsvXqXY7s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "GetUserRankLambdaVersionNgHwBmWmGYSeNRJui8BMLLRkCrq6vzgjYKndtur1dA0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserRankLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "UpdateUserLambdaVersionMk4mXx9cTIJzShb5Ec8seFH76EuCDCwyNfk96MUds": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "GetInboxLambdaVersion07YDTp8C7YisVi0hynhcsYfmjVAk6fX0WgzJsCRYJA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetInboxLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "GetVideoUrlLambdaVersionYa7ZmfPgRpWmeipuj2uelRAk55j5Z34mZmZdzoGDOM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetVideoUrlLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "GetUserPostsLambdaVersionCZqP1kGO5fCJGiKSjlfxlUxyqV4hdMvOjXoI9MKs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserPostsLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "RegisterLambdaVersionp7xH8mIrI37WQ6E9L6bgt0xYq27CcUQtz7KaogmZEI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "LoginLambdaVersions50DSdltOLUvAKqCRTtlqzAQ1Z6gx0iKiBDXAvlM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "LikePostLambdaVersioni0BMO5ucbkUtaNAH1rDZIO71d16RWDbAc4MhgiYAJk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LikePostLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "UnlikePostLambdaVersionWuQR41PtVPzmOQCGoEk3yVjQ0GRieCGeA0ci0eIuvY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UnlikePostLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "SavePostLambdaVersionWAG8hzVaL4pA1gH4eipuMHG9NSms5Q15gNRmRRQAg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SavePostLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "UnsavePostLambdaVersionUaeyICzaJUqPBuIX1JqfMn01D2c8QvAtGqdmlaixw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UnsavePostLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "AddCommentLambdaVersionCqkvlHci9k49EVUq8dOdWy3mXcHTcv6C4LawkarSHBw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddCommentLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "VerifyVideoLambdaVersionGKSej1nXNfZUkpIOiERSV4GBVmzADKSE4wG3pmkLNm0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyVideoLambdaFunction"
              },
              "CodeSha256": "0SiwoqdoJYwzapiy7FBy7ljRaatcF+/upIXrJ+D/kz8="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-tagapp-backend",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "PresignUploadLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PresignUploadLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPresignUpload": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PresignUploadLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPresign": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /presign",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPresignUpload"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPresignUpload"
          },
          "CreatePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreatePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreatePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPosts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /posts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreatePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreatePost"
          },
          "GetAllPostsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllPostsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllPosts": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllPostsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetPosts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /posts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllPosts"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllPosts"
          },
          "GetCommunityFeedLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCommunityFeedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCommunityFeed": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCommunityFeedLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCommunitiesCommunityidVarPosts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /communities/{communityId}/posts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCommunityFeed"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCommunityFeed"
          },
          "ListCommunitiesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListCommunitiesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationListCommunities": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ListCommunitiesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCommunities": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /communities",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationListCommunities"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationListCommunities"
          },
          "GetUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsersUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users/{userId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUser"
          },
          "GetUserRankLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserRankLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUserRank": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserRankLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsersUseridVarRank": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users/{userId}/rank",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUserRank"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUserRank"
          },
          "UpdateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users/{userId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateUser"
          },
          "GetInboxLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetInboxLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetInbox": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetInboxLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsersUseridVarInbox": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users/{userId}/inbox",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetInbox"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetInbox"
          },
          "GetVideoUrlLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetVideoUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetVideoUrl": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetVideoUrlLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetVideoDashurlObjectkeyVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /video-url/{objectKey+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetVideoUrl"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetVideoUrl"
          },
          "GetUserPostsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserPostsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUserPosts": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserPostsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsersUseridVarPosts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users/{userId}/posts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUserPosts"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUserPosts"
          },
          "RegisterLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRegister": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RegisterLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthRegister": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/register",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRegister"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRegister"
          },
          "LoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogin"
          },
          "LikePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LikePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLikePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LikePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPostsPostidVarLike": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /posts/{postId}/like",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLikePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLikePost"
          },
          "UnlikePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UnlikePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUnlikePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UnlikePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeletePostsPostidVarLike": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /posts/{postId}/like",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUnlikePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUnlikePost"
          },
          "SavePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SavePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSavePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SavePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPostsPostidVarSave": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /posts/{postId}/save",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSavePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSavePost"
          },
          "UnsavePostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UnsavePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUnsavePost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UnsavePostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeletePostsPostidVarSave": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /posts/{postId}/save",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUnsavePost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUnsavePost"
          },
          "AddCommentLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddComment": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddCommentLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPostsPostidVarComments": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /posts/{postId}/comments",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddComment"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAddComment"
          },
          "VerifyVideoLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyVideoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationVerifyVideo": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"VerifyVideoLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostVerify": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /verify",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationVerifyVideo"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationVerifyVideo"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "PresignUploadLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PresignUploadLambdaVersionnAWJGk7nEVHzsKF6T1yzf5OtXq9cXXnHfgBEADhx5Y"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-PresignUploadLambdaFunctionQualifiedArn"
            }
          },
          "CreatePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePostLambdaVersionxsQuu9FkLk2iFwypoEp8QTLeY9ryvEBbWL3t7qhk"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-CreatePostLambdaFunctionQualifiedArn"
            }
          },
          "GetAllPostsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllPostsLambdaVersion4cKE904vVdTm9MLcmN3Dq72RzWHp2FNzhyJVZk7BIk"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetAllPostsLambdaFunctionQualifiedArn"
            }
          },
          "GetCommunityFeedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCommunityFeedLambdaVersiongz1FPfU3biTVxV8nAeRY39XCC5IhoSO8zJdAFpGngDg"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetCommunityFeedLambdaFunctionQualifiedArn"
            }
          },
          "ListCommunitiesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListCommunitiesLambdaVersion8bz6iKsOFZzp8sMUpSWPR2Xq3xFnqe6zrUaKIFItSY"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-ListCommunitiesLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionyAWxaytAupyRe7U51pjAjKzQiEaIqJVywsvXqXY7s"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserRankLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserRankLambdaVersionNgHwBmWmGYSeNRJui8BMLLRkCrq6vzgjYKndtur1dA0"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetUserRankLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionMk4mXx9cTIJzShb5Ec8seFH76EuCDCwyNfk96MUds"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "GetInboxLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetInboxLambdaVersion07YDTp8C7YisVi0hynhcsYfmjVAk6fX0WgzJsCRYJA"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetInboxLambdaFunctionQualifiedArn"
            }
          },
          "GetVideoUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetVideoUrlLambdaVersionYa7ZmfPgRpWmeipuj2uelRAk55j5Z34mZmZdzoGDOM"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetVideoUrlLambdaFunctionQualifiedArn"
            }
          },
          "GetUserPostsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserPostsLambdaVersionCZqP1kGO5fCJGiKSjlfxlUxyqV4hdMvOjXoI9MKs"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-GetUserPostsLambdaFunctionQualifiedArn"
            }
          },
          "RegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterLambdaVersionp7xH8mIrI37WQ6E9L6bgt0xYq27CcUQtz7KaogmZEI"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-RegisterLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersions50DSdltOLUvAKqCRTtlqzAQ1Z6gx0iKiBDXAvlM"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "LikePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LikePostLambdaVersioni0BMO5ucbkUtaNAH1rDZIO71d16RWDbAc4MhgiYAJk"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-LikePostLambdaFunctionQualifiedArn"
            }
          },
          "UnlikePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UnlikePostLambdaVersionWuQR41PtVPzmOQCGoEk3yVjQ0GRieCGeA0ci0eIuvY"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-UnlikePostLambdaFunctionQualifiedArn"
            }
          },
          "SavePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SavePostLambdaVersionWAG8hzVaL4pA1gH4eipuMHG9NSms5Q15gNRmRRQAg"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-SavePostLambdaFunctionQualifiedArn"
            }
          },
          "UnsavePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UnsavePostLambdaVersionUaeyICzaJUqPBuIX1JqfMn01D2c8QvAtGqdmlaixw"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-UnsavePostLambdaFunctionQualifiedArn"
            }
          },
          "AddCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddCommentLambdaVersionCqkvlHci9k49EVUq8dOdWy3mXcHTcv6C4LawkarSHBw"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-AddCommentLambdaFunctionQualifiedArn"
            }
          },
          "VerifyVideoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyVideoLambdaVersionGKSej1nXNfZUkpIOiERSV4GBVmzADKSE4wG3pmkLNm0"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-VerifyVideoLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-tagapp-backend-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [],
    "pluginsData": {},
    "functions": {
      "presignUpload": {
        "handler": "src/presign.handler",
        "events": [
          {
            "httpApi": {
              "path": "/presign",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/presign"
          }
        ],
        "name": "tagapp-backend-dev-presignUpload",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PresignUploadLambdaVersionnAWJGk7nEVHzsKF6T1yzf5OtXq9cXXnHfgBEADhx5Y"
      },
      "createPost": {
        "handler": "src/posts.create",
        "events": [
          {
            "httpApi": {
              "path": "/posts",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/posts"
          }
        ],
        "name": "tagapp-backend-dev-createPost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreatePostLambdaVersionxsQuu9FkLk2iFwypoEp8QTLeY9ryvEBbWL3t7qhk"
      },
      "getAllPosts": {
        "handler": "src/posts.getAll",
        "events": [
          {
            "httpApi": {
              "path": "/posts",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/posts"
          }
        ],
        "name": "tagapp-backend-dev-getAllPosts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAllPostsLambdaVersion4cKE904vVdTm9MLcmN3Dq72RzWHp2FNzhyJVZk7BIk"
      },
      "getCommunityFeed": {
        "handler": "src/posts.getCommunityFeed",
        "events": [
          {
            "httpApi": {
              "path": "/communities/{communityId}/posts",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/communities/{communityId}/posts"
          }
        ],
        "name": "tagapp-backend-dev-getCommunityFeed",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetCommunityFeedLambdaVersiongz1FPfU3biTVxV8nAeRY39XCC5IhoSO8zJdAFpGngDg"
      },
      "listCommunities": {
        "handler": "src/communities.list",
        "events": [
          {
            "httpApi": {
              "path": "/communities",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/communities"
          }
        ],
        "name": "tagapp-backend-dev-listCommunities",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ListCommunitiesLambdaVersion8bz6iKsOFZzp8sMUpSWPR2Xq3xFnqe6zrUaKIFItSY"
      },
      "getUser": {
        "handler": "src/users.get",
        "events": [
          {
            "httpApi": {
              "path": "/users/{userId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users/{userId}"
          }
        ],
        "name": "tagapp-backend-dev-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionyAWxaytAupyRe7U51pjAjKzQiEaIqJVywsvXqXY7s"
      },
      "getUserRank": {
        "handler": "src/users.rank",
        "events": [
          {
            "httpApi": {
              "path": "/users/{userId}/rank",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users/{userId}/rank"
          }
        ],
        "name": "tagapp-backend-dev-getUserRank",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserRankLambdaVersionNgHwBmWmGYSeNRJui8BMLLRkCrq6vzgjYKndtur1dA0"
      },
      "updateUser": {
        "handler": "src/users.update",
        "events": [
          {
            "httpApi": {
              "path": "/users/{userId}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/users/{userId}"
          }
        ],
        "name": "tagapp-backend-dev-updateUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersionMk4mXx9cTIJzShb5Ec8seFH76EuCDCwyNfk96MUds"
      },
      "getInbox": {
        "handler": "src/inbox.get",
        "events": [
          {
            "httpApi": {
              "path": "/users/{userId}/inbox",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users/{userId}/inbox"
          }
        ],
        "name": "tagapp-backend-dev-getInbox",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetInboxLambdaVersion07YDTp8C7YisVi0hynhcsYfmjVAk6fX0WgzJsCRYJA"
      },
      "getVideoUrl": {
        "handler": "src/get-video-url.handler",
        "events": [
          {
            "httpApi": {
              "path": "/video-url/{objectKey+}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/video-url/{objectKey+}"
          }
        ],
        "name": "tagapp-backend-dev-getVideoUrl",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetVideoUrlLambdaVersionYa7ZmfPgRpWmeipuj2uelRAk55j5Z34mZmZdzoGDOM"
      },
      "getUserPosts": {
        "handler": "src/posts.getUserPosts",
        "events": [
          {
            "httpApi": {
              "path": "/users/{userId}/posts",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users/{userId}/posts"
          }
        ],
        "name": "tagapp-backend-dev-getUserPosts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserPostsLambdaVersionCZqP1kGO5fCJGiKSjlfxlUxyqV4hdMvOjXoI9MKs"
      },
      "register": {
        "handler": "src/auth.register",
        "events": [
          {
            "httpApi": {
              "path": "/auth/register",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/auth/register"
          }
        ],
        "name": "tagapp-backend-dev-register",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RegisterLambdaVersionp7xH8mIrI37WQ6E9L6bgt0xYq27CcUQtz7KaogmZEI"
      },
      "login": {
        "handler": "src/auth.login",
        "events": [
          {
            "httpApi": {
              "path": "/auth/login",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/auth/login"
          }
        ],
        "name": "tagapp-backend-dev-login",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersions50DSdltOLUvAKqCRTtlqzAQ1Z6gx0iKiBDXAvlM"
      },
      "likePost": {
        "handler": "src/interactions.likePost",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/like",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/posts/{postId}/like"
          }
        ],
        "name": "tagapp-backend-dev-likePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LikePostLambdaVersioni0BMO5ucbkUtaNAH1rDZIO71d16RWDbAc4MhgiYAJk"
      },
      "unlikePost": {
        "handler": "src/interactions.unlikePost",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/like",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/posts/{postId}/like"
          }
        ],
        "name": "tagapp-backend-dev-unlikePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UnlikePostLambdaVersionWuQR41PtVPzmOQCGoEk3yVjQ0GRieCGeA0ci0eIuvY"
      },
      "savePost": {
        "handler": "src/interactions.savePost",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/save",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/posts/{postId}/save"
          }
        ],
        "name": "tagapp-backend-dev-savePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SavePostLambdaVersionWAG8hzVaL4pA1gH4eipuMHG9NSms5Q15gNRmRRQAg"
      },
      "unsavePost": {
        "handler": "src/interactions.unsavePost",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/save",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/posts/{postId}/save"
          }
        ],
        "name": "tagapp-backend-dev-unsavePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UnsavePostLambdaVersionUaeyICzaJUqPBuIX1JqfMn01D2c8QvAtGqdmlaixw"
      },
      "addComment": {
        "handler": "src/interactions.addComment",
        "events": [
          {
            "httpApi": {
              "path": "/posts/{postId}/comments",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/posts/{postId}/comments"
          }
        ],
        "name": "tagapp-backend-dev-addComment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AddCommentLambdaVersionCqkvlHci9k49EVUq8dOdWy3mXcHTcv6C4LawkarSHBw"
      },
      "verifyVideo": {
        "handler": "verification_lambda/handler.lambda_handler",
        "runtime": "python3.11",
        "events": [
          {
            "httpApi": {
              "path": "/verify",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/verify"
          }
        ],
        "name": "tagapp-backend-dev-verifyVideo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "vpc": {},
        "versionLogicalId": "VerifyVideoLambdaVersionGKSej1nXNfZUkpIOiERSV4GBVmzADKSE4wG3pmkLNm0"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "tagapp-backend",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\arind\\Music\\TAG\\TagApp\\backend\\.serverless\\tagapp-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/tagapp-backend/dev/1760893382590-2025-10-19T17:03:02.590Z",
    "artifact": "tagapp-backend.zip"
  }
}