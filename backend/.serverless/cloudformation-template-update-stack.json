{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "PresignUploadLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-presignUpload"
      }
    },
    "CreatePostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-createPost"
      }
    },
    "GetAllPostsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-getAllPosts"
      }
    },
    "GetCommunityFeedLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-getCommunityFeed"
      }
    },
    "ListCommunitiesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-listCommunities"
      }
    },
    "GetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-getUser"
      }
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-updateUser"
      }
    },
    "GetInboxLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-getInbox"
      }
    },
    "GetVideoUrlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-getVideoUrl"
      }
    },
    "GetUserPostsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-getUserPosts"
      }
    },
    "RegisterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-register"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-login"
      }
    },
    "LikePostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-likePost"
      }
    },
    "UnlikePostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-unlikePost"
      }
    },
    "SavePostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-savePost"
      }
    },
    "UnsavePostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-unsavePost"
      }
    },
    "AddCommentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tagapp-backend-dev-addComment"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "tagapp-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagapp-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagapp-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::tagapp-videos/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:BatchWriteItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-west-2:*:table/Users",
                    "arn:aws:dynamodb:us-west-2:*:table/Posts",
                    "arn:aws:dynamodb:us-west-2:*:table/Communities",
                    "arn:aws:dynamodb:us-west-2:*:table/Inbox"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "tagapp-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "PresignUploadLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/presign.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-presignUpload",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PresignUploadLogGroup"
      ]
    },
    "CreatePostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/posts.create",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-createPost",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreatePostLogGroup"
      ]
    },
    "GetAllPostsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/posts.getAll",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-getAllPosts",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllPostsLogGroup"
      ]
    },
    "GetCommunityFeedLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/posts.getCommunityFeed",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-getCommunityFeed",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCommunityFeedLogGroup"
      ]
    },
    "ListCommunitiesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/communities.list",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-listCommunities",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListCommunitiesLogGroup"
      ]
    },
    "GetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/users.get",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-getUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserLogGroup"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/users.update",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-updateUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserLogGroup"
      ]
    },
    "GetInboxLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/inbox.get",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-getInbox",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetInboxLogGroup"
      ]
    },
    "GetVideoUrlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/get-video-url.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-getVideoUrl",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetVideoUrlLogGroup"
      ]
    },
    "GetUserPostsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/posts.getUserPosts",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-getUserPosts",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserPostsLogGroup"
      ]
    },
    "RegisterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/auth.register",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-register",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/auth.login",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "LikePostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/interactions.likePost",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-likePost",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LikePostLogGroup"
      ]
    },
    "UnlikePostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/interactions.unlikePost",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-unlikePost",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UnlikePostLogGroup"
      ]
    },
    "SavePostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/interactions.savePost",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-savePost",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SavePostLogGroup"
      ]
    },
    "UnsavePostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/interactions.unsavePost",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-unsavePost",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UnsavePostLogGroup"
      ]
    },
    "AddCommentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tagapp-backend/dev/1760891383848-2025-10-19T16:29:43.848Z/tagapp-backend.zip"
        },
        "Handler": "src/interactions.addComment",
        "Runtime": "nodejs18.x",
        "FunctionName": "tagapp-backend-dev-addComment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "tagapp-videos",
            "USERS_TABLE": "Users",
            "POSTS_TABLE": "Posts",
            "COMMUNITIES_TABLE": "Communities",
            "INBOX_TABLE": "Inbox",
            "JWT_SECRET": "dev-secret-change-me"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddCommentLogGroup"
      ]
    },
    "PresignUploadLambdaVersion7O8FI2WAGxFig79ZunfTEdg7u7NGPuWr42XrJ9BCw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PresignUploadLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "CreatePostLambdaVersiontwLeXvrHN7DHqQDY2PTln8QCSYd5YVZqgY31A6TAA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreatePostLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "GetAllPostsLambdaVersionWYAYNO0VLLUAtqmVvH3f1Ufef3QAGz53DpSdUGAVBI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllPostsLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "GetCommunityFeedLambdaVersionD9ZC9TAkKDcUkL0gsGkbE3ftEjFn0ykdWELZ12nzQUQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCommunityFeedLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "ListCommunitiesLambdaVersionYarW9q8HXRkpULsyWBzTh5lQl05Y4YeDydiq4GCvxK4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListCommunitiesLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "GetUserLambdaVersionuu6JQVIRi1qPDbziKoCF7YQPCJ9u0xxeHSdPcJtOrE4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "UpdateUserLambdaVersion9uflmL3ZSIw928IUVEWMSehfYHspLqteuwv0hBPnl60": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "GetInboxLambdaVersion3j377qVZBOytPldI6nburKul4P3uUFy2eqnMeVjQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetInboxLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "GetVideoUrlLambdaVersionF8TU3Pe2yYOnM2t9QzNouU7oCpUWwtM4LWLF3hx6I7I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetVideoUrlLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "GetUserPostsLambdaVersionDiUjnihPIB5cgOAYXfm427epduREhQgDSoPpMI3Rc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserPostsLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "RegisterLambdaVersion2VJVNOQftq9AHqZ89NqRBNwviXJUILX5czvHiHdBKXI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "LoginLambdaVersionThprstGPyu6Xkt8SQsVgXyZRtww26Koazi9edvRWPU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "LikePostLambdaVersionuXue2ix3XaZVyOp9o75rM5s9rBqyE5mOf2nw3JkvQU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LikePostLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "UnlikePostLambdaVersionmzNNUWhxr6rvqGwr1bgiHVUhCJNw3DhQIXsV3F8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UnlikePostLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "SavePostLambdaVersionB7kzpgub6FU8hmm8bVbawkM2hyKGZ7qz007WEw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SavePostLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "UnsavePostLambdaVersionfK0hyi7GB1mpet7OpX06LzBIjuNTaL45i3t2VSmao": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UnsavePostLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "AddCommentLambdaVersioniSe8eqxIMj6PWzSxmyS6xz5jMgvkyuyKw53BBOgtA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddCommentLambdaFunction"
        },
        "CodeSha256": "SKT4DRWXDdFrOCqYgeIul8862koVNBam8HGNkq/fn1Y="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-tagapp-backend",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "PresignUploadLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PresignUploadLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationPresignUpload": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "PresignUploadLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPresign": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /presign",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationPresignUpload"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationPresignUpload"
    },
    "CreatePostLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreatePostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreatePost": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreatePostLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPosts": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /posts",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreatePost"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreatePost"
    },
    "GetAllPostsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllPostsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllPosts": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllPostsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPosts": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /posts",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllPosts"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllPosts"
    },
    "GetCommunityFeedLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCommunityFeedLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetCommunityFeed": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetCommunityFeedLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCommunitiesCommunityidVarPosts": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /communities/{communityId}/posts",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetCommunityFeed"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetCommunityFeed"
    },
    "ListCommunitiesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListCommunitiesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationListCommunities": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ListCommunitiesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCommunities": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /communities",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationListCommunities"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationListCommunities"
    },
    "GetUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsersUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /users/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUser"
    },
    "UpdateUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUsersUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /users/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateUser"
    },
    "GetInboxLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetInboxLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetInbox": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetInboxLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsersUseridVarInbox": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /users/{userId}/inbox",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetInbox"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetInbox"
    },
    "GetVideoUrlLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetVideoUrlLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetVideoUrl": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetVideoUrlLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetVideoDashurlObjectkeyVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /video-url/{objectKey+}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetVideoUrl"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetVideoUrl"
    },
    "GetUserPostsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserPostsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUserPosts": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUserPostsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsersUseridVarPosts": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /users/{userId}/posts",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUserPosts"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUserPosts"
    },
    "RegisterLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRegister": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RegisterLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthRegister": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/register",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRegister"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRegister"
    },
    "LoginLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLogin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthLogin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/login",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLogin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLogin"
    },
    "LikePostLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LikePostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLikePost": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LikePostLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPostsPostidVarLike": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /posts/{postId}/like",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLikePost"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLikePost"
    },
    "UnlikePostLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UnlikePostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUnlikePost": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UnlikePostLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeletePostsPostidVarLike": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /posts/{postId}/like",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUnlikePost"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUnlikePost"
    },
    "SavePostLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SavePostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSavePost": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SavePostLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPostsPostidVarSave": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /posts/{postId}/save",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSavePost"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSavePost"
    },
    "UnsavePostLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UnsavePostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUnsavePost": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UnsavePostLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeletePostsPostidVarSave": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /posts/{postId}/save",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUnsavePost"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUnsavePost"
    },
    "AddCommentLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddCommentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddComment": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddCommentLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPostsPostidVarComments": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /posts/{postId}/comments",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddComment"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAddComment"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "PresignUploadLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PresignUploadLambdaVersion7O8FI2WAGxFig79ZunfTEdg7u7NGPuWr42XrJ9BCw"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-PresignUploadLambdaFunctionQualifiedArn"
      }
    },
    "CreatePostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreatePostLambdaVersiontwLeXvrHN7DHqQDY2PTln8QCSYd5YVZqgY31A6TAA"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-CreatePostLambdaFunctionQualifiedArn"
      }
    },
    "GetAllPostsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllPostsLambdaVersionWYAYNO0VLLUAtqmVvH3f1Ufef3QAGz53DpSdUGAVBI"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-GetAllPostsLambdaFunctionQualifiedArn"
      }
    },
    "GetCommunityFeedLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCommunityFeedLambdaVersionD9ZC9TAkKDcUkL0gsGkbE3ftEjFn0ykdWELZ12nzQUQ"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-GetCommunityFeedLambdaFunctionQualifiedArn"
      }
    },
    "ListCommunitiesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListCommunitiesLambdaVersionYarW9q8HXRkpULsyWBzTh5lQl05Y4YeDydiq4GCvxK4"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-ListCommunitiesLambdaFunctionQualifiedArn"
      }
    },
    "GetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserLambdaVersionuu6JQVIRi1qPDbziKoCF7YQPCJ9u0xxeHSdPcJtOrE4"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-GetUserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserLambdaVersion9uflmL3ZSIw928IUVEWMSehfYHspLqteuwv0hBPnl60"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-UpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "GetInboxLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetInboxLambdaVersion3j377qVZBOytPldI6nburKul4P3uUFy2eqnMeVjQ"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-GetInboxLambdaFunctionQualifiedArn"
      }
    },
    "GetVideoUrlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetVideoUrlLambdaVersionF8TU3Pe2yYOnM2t9QzNouU7oCpUWwtM4LWLF3hx6I7I"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-GetVideoUrlLambdaFunctionQualifiedArn"
      }
    },
    "GetUserPostsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserPostsLambdaVersionDiUjnihPIB5cgOAYXfm427epduREhQgDSoPpMI3Rc"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-GetUserPostsLambdaFunctionQualifiedArn"
      }
    },
    "RegisterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterLambdaVersion2VJVNOQftq9AHqZ89NqRBNwviXJUILX5czvHiHdBKXI"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-RegisterLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersionThprstGPyu6Xkt8SQsVgXyZRtww26Koazi9edvRWPU"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "LikePostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LikePostLambdaVersionuXue2ix3XaZVyOp9o75rM5s9rBqyE5mOf2nw3JkvQU"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-LikePostLambdaFunctionQualifiedArn"
      }
    },
    "UnlikePostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UnlikePostLambdaVersionmzNNUWhxr6rvqGwr1bgiHVUhCJNw3DhQIXsV3F8"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-UnlikePostLambdaFunctionQualifiedArn"
      }
    },
    "SavePostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SavePostLambdaVersionB7kzpgub6FU8hmm8bVbawkM2hyKGZ7qz007WEw"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-SavePostLambdaFunctionQualifiedArn"
      }
    },
    "UnsavePostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UnsavePostLambdaVersionfK0hyi7GB1mpet7OpX06LzBIjuNTaL45i3t2VSmao"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-UnsavePostLambdaFunctionQualifiedArn"
      }
    },
    "AddCommentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddCommentLambdaVersioniSe8eqxIMj6PWzSxmyS6xz5jMgvkyuyKw53BBOgtA"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-AddCommentLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-tagapp-backend-dev-HttpApiUrl"
      }
    }
  }
}